def my_print(delimiter: str, name: str, score: int) -> None:
    for i in range(0, 50):
        print(delimiter, end="")
    print(f"\n\t {delimiter * 3} Παίκτης: {name} \t {delimiter * 3} Σκορ: {score}")
    for i in range(0, 50):
        print(delimiter, end="")
    print("\n")


def print_start(delimiter) -> None:
    print(f"{delimiter * 5}\tScramble\t{delimiter * 5}")
    print("-" * 25)
    print("1: Σκορ\n2: Έναρξη Παιχνιδιού\n3: Έξοδος")
    print("-" * 25)


def guidelines():
    """
    1. ΚΛΑΣΕΙΣ

    SakClass, κλάση που περιγράφει το σακουλάκι με τα γράμματα.
    - init: Constructor  με argument ενα dictionary.
    - getletters:  επιστρέφει ενα dictionary και χρησιμοποιεί την Rant.
    - putbackletters: επιστρέφει τα γράμματα στο σακουλάκι και αυξάνει όσα γράμματα έδωσε πριν.

    Player: H parent Class
    - init : Constructor με ένα όνομα
    - @staticmethod isValid : αν υπάρχει η λέξη στο αρχείο που ανοίξαμε. ( επιστρέφει boolean )
    - @staticmethod add_score : προσθέτει το Score
    _ __repr __ = __str__ : Εκτυπώνουν τον Player

    Human(Player), child Class της Player για τον παίχτη.
    - init: Constructor που καλεί την Player ( .super )
    - @staticmethod get_input_word(): Για να πάρει το input του χρήστη.
    - __repr __ = __str__ : Εκτυπώνουν τον Human


    Computer(Player): child Class της Player για τον υπολογιστή
    - Smart_Fail: Εξηγείται στο βήμα 4 με λεπτομέρεια
    - __repr __ = __str__ : Εκτυπώνουν τον Human


    Game( Human, Computer, SakClass): Mediator Class (Software Design Pattern) για την επικοινωνία μεταξύ Human , Computer και Sakclass
    - @staticmethod dump(data): Γράφει τα δεδομένα σε ενα εξωτερικό Json αρχείο. Δεν χρησιμοποιήθηκε pickle επειδή δεν είναι ασφαλές
    - @staticmethod laοd() : Παίρνει τα δεδομένα απο ενα JSON αρχείο.
    - run(self): Υλοποιεί την λογική με ελέγχους και while - loops μέχρι τα γράμματα να είναι λιγότερα απο 3 και στο τέλος τα γράφει στο json αρχείο.
    - @staticmethod end(): Καλεί την quit()

    ------------------------------------------------------------------------------------------------------------------------------------------
    2. ΔΟΜΗ Λέξεων της γλώσσας
    - Έχει υλοποιηθεί Dictionary για την αποθήκευση του greek7.txt ώστε να έχουμεSearch : O(1) που χρησιμοποιείται συνέχεια για την εύρεση της λέξης.
    - Ενα list για τα permutations . Μετά γίνονται parse σε Set
    - Ενα Dictionary για την ταξινόμηση , εύρεση και αποθήκευση των Permutations,Values


    ------------------------------------------------------------------------------------------------------------------------------------------
    3. MODULE
    Όλες οι κλάσεις βρίσκονται σε ξεχωριστό αρχείο (classes.py) και έχουμε κάποια εξτρα με συναρτήσεις που δεν είχαν νόημα να υλοποιηθουν στις κλάσεις.
    lets.py
        - lets για τα γράμματα
        - letters για τη συχνότητα και το βαθμό των γραμμάτων.

    myfunctions_module.py
        -prints
        -guideline

    ------------------------------------------------------------------------------------------------------------------------------------------
    4. ΑΛΓΟΡΙΘΜΟΣ SMART-FAIL
    i: Με την εντολή [''.join(p) for p in permutations(available_letters, i)] βρίσκουμε ολα τα permutations
    ii: Ta κάνουμε parse σε Set και τα προσθέτουμε στο Set για απολυφή πιθανόν duplicates.
    iii: Δημιουργούμε ενα Dictionary    perms_dict = dict.fromkeys(all_perms, 0) και προσθέτουμε για καθε λέξη την αξία της
    iv : Τέλος γίνεται Sort βάση του value σε φθίνουσα a = sorted(perms_dict.items(), key=lambda x: x[1], reverse=True)
    v : Επιστρέφουμε την 3η, αλλιώς την δεύτερη ή την πρώτη λέξη αν δεν υπάρχει.


    ------------------------------------------------------------------------------------------------------------------------------------------
    5. ΟΡΘΟΤΗΤΑ ΚΩΔΙΚΑ & ΜΗΝΥΜΑΤΑ
    Ακολούθησα τις διαφάνειες του μαθήματος για την λογική και την εκτύπωση του κώδικα

    ------------------------------------------------------------------------------------------------------------------------------------------
    6. ΤΕΚΜΗΡΙΩΣΗ (docstring)
    $ from myfunctions_module import guidelines"
    $ help(guidelines)"


    ------------------------------------------------------------------------------------------------------------------------------------------
    7. ΑΡΧΕΙΑ
    Η εργασία αποτελείται από 5 αρχεία . Γνωρίζω ότι μας είπατε να μην ακολουθήσουμε την φιλοσοφία της Java ( 1 αρχείο / class ).
    Βέβαια δημιούργησα όσα θεώρησα θα με βοηθούσαν να έχω καλύτερη διαχείρηση και να είναι ευανάγνωστο.

    """
